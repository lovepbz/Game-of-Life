#pragma kernel Update
#pragma kernel ComputeVertex

RWStructuredBuffer<uint> data;
RWStructuredBuffer<uint> nextData;


uniform int width;
uniform int height;

int ToIndex(int2 coord)
{
    if (coord.x == -1)coord.x = width - 1;
    else if (coord.x == width) coord.x = 0;

    if (coord.y == -1)coord.y = height - 1;
    else if (coord.y == height)coord.y = 0;

    return coord.y * width + coord.x;
}

[numthreads(8,8,1)]
void Update(int3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height)return;
    const int2 coord = id.xy;
    const int index = ToIndex(coord);

    const uint aliveNum =
        data[ToIndex(coord + int2(-1, -1))]
        + data[ToIndex(coord + int2(0, -1))]
        + data[ToIndex(coord + int2(1, -1))]

        + data[ToIndex(coord + int2(-1, 0))]
        + data[ToIndex(coord + int2(1, 0))]

        + data[ToIndex(coord + int2(-1, 1))]
        + data[ToIndex(coord + int2(0, 1))]
        + data[ToIndex(coord + int2(1, 1))];


    int temp = data[index];

    if (temp == 1)
    {
        if (aliveNum < 2 || aliveNum > 3)
        {
            temp = 0;
        }
    }
    else
    {
        if (aliveNum == 3)
        {
            temp = 1;
        }
    }

    nextData[index] = temp;
}


struct VertexData
{
    float3 pos;
    float4 color;
};

static float4 WHITE = float4(1, 1, 1, 1);
static float4 BLACK = float4(0, 0, 0, 1);

uniform float3 posOffset[4];

RWStructuredBuffer<VertexData> vertexDataBuffer;

[numthreads(8,8,1)]
void ComputeVertex(int3 id : SV_DispatchThreadID)
{
    const int2 coord = int2(id.x >> 2, id.y);
    if (coord.x >= width || coord.y >= height)return;
    VertexData vertex_data;
    vertex_data.pos = posOffset[id.x & 3] + float3(coord, 0);

    if (data[ToIndex(coord)] == 1)
    {
        vertex_data.color = BLACK;
    }
    else
    {
        vertex_data.color = WHITE;
    }

    vertexDataBuffer[width * id.y * 4 + id.x] = vertex_data;
}
